Bootstrap: docker
From: ubuntu

%post
    # Install necessary system packages
    apt-get update && apt-get install -y python3 python3-pip vim git bash parallel wget curl locales libgl1 python3-openpyxl python3-packaging libglx-mesa0 libglib2.0-0 git-lfs jq libgfortran5 libatlas3-base bc python-is-python3 libxt6 libeigen3-dev zlib1g-dev libgl1-mesa-dev libtiff5-dev libfftw3-dev libxft2 libxpm4 libgomp1 libxrender1 libssl-dev zip unzip
        
    mkdir -p /usr/local/lib/python3.12/dist-packages/ANTs/
    cd /usr/local/lib/python3.12/dist-packages/ANTs/
    wget https://github.com/ANTsX/ANTs/releases/download/v2.5.4/ants-2.5.4-ubuntu-24.04-X64-gcc.zip
    unzip ants-2.5.4-ubuntu-24.04-X64-gcc.zip
    
    mkdir -p /usr/local/lib/python3.12/dist-packages/afni/
    cd /usr/local/lib/python3.12/dist-packages/afni/
    curl -O https://afni.nimh.nih.gov/pub/dist/tgz/linux_ubuntu_16_64.tgz
    tar -xzf linux_ubuntu_16_64.tgz

    mkdir -p /usr/local/lib/python3.12/dist-packages/fsl/ 
    cd /usr/local/lib/python3.12/dist-packages/fsl/ 
    curl -O https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.11-centos6_64.tar.gz 
    tar -xzvf fsl-5.0.11-centos6_64.tar.gz

    # Install Python packages using pip
    pip install --break-system-packages pybids
    pip install --break-system-packages bids
    pip install --break-system-packages nibabel==3.2.1
    pip install --break-system-packages pydicom>=1.3.0
    pip install --break-system-packages setuptools
    pip install --break-system-packages wheel
    pip install --break-system-packages pyyaml && pip install --break-system-packages 'numpy<2.0.0'
    pip install --break-system-packages backends==1.6.6
    pip install --break-system-packages scipy>=1.2.1 
    pip install --break-system-packages scikit-learn>=0.20.3
    pip install --break-system-packages matplotlib>=3.0.3
    pip install --break-system-packages statsmodels>=0.9.0
    pip install --break-system-packages patsy>=0.5.1
    pip install --break-system-packages pandas>=1.1.5
    pip install --break-system-packages scikit-image
    pip install --break-system-packages dipy==1.8.0
    pip install --break-system-packages absl-py    
    pip install --upgrade --force-reinstall --index-url https://__token__:glpat-NzRyYs9NWyXtWDCWJLif@gitlab.com/api/v4/projects/65904707/packages/pypi/simple Diciphr --no-deps --break-system-packages
    
    mkdir -p /usr/local/bin/Scripts
    mkdir -p /usr/local/Input
    chmod +x /usr/local/bin/Scripts/*.sh

    mkdir -p /usr/local/Modules/modulefiles
    mkdir -p /usr/local/Modules/modulefiles/Brainmage
    mkdir -p /usr/local/Input/EveTemplate
    locale-gen en_US.UTF-8
    update-locale LANG=en_US.UTF-8    
    git clone https://github.com/CBICA/BrainMaGe.git /usr/local/Modules/modulefiles/Brainmage
    cd /usr/local/Modules/modulefiles/Brainmage
    git-lfs install
    git lfs pull
    python3 -c "import yaml; f = open('requirements.yml', 'r'); requirements = yaml.safe_load(f); f.close(); f = open('requirements.txt', 'w'); [f.write(dep + '\n') for dep in requirements['dependencies'] if isinstance(dep, str) and '::' not in dep and '=' not in dep and not any(pkg in dep for pkg in ['absl-py', 'grpcio', 'scikit-image'])]; [f.write(pip_dep + '\n') for dep in requirements['dependencies'] if isinstance(dep, dict) and 'pip' in dep for pip_dep in dep['pip'] if not any(pkg in pip_dep for pkg in ['absl-py', 'grpcio', 'nibabel', 'pybids', 'scikit-image'])]; f.close()"
    python3 --version
    while IFS= read -r package; do
        pip install "$package" --break-system-packages || echo "Failed to install $package, continuing..."
    done < requirements.txt
    latesttag=$(git describe --tags)

    pip uninstall --break-system-packages -y nibabel
    pip uninstall --break-system-packages -y pydicom
    pip install --break-system-packages 'pydicom<=1.4.1'
    pip install --break-system-packages nibabel==3.2.1
    pip install --break-system-packages itk
    pip uninstall --break-system-packages -y pytorch-lightning
    pip install --break-system-packages pytorch-lightning==0.7.6
    pip uninstall --break-system-packages -y torchmetrics
    pip install --break-system-packages torchmetrics==0.11.4
    pip uninstall --break-system-packages -y tensorboard
    pip install --break-system-packages tensorboard==2.18.0
    
    echo checking out ${latesttag}
    git checkout ${latesttag}
    python3 setup.py install --single-version-externally-managed --record record.txt    
    chmod -R +x /usr/local/lib/python3.12/dist-packages/diciphr
    ls -R /usr/local/lib/python3.12/dist-packages/diciphr
    rm /usr/local/Modules/modulefiles/Brainmage/BrainMaGe.egg-info/requires.txt
    python3 -m pip list -v    
    mkdir -p /usr/BrainMaGe/weights/
    cp /usr/local/lib/python3.12/dist-packages/BrainMaGe/weights/resunet_ma.pt /usr/BrainMaGe/weights/
    chmod -R +x /usr/local/lib/python3.12/dist-packages/ANTs/ants-2.5.4/
    chmod -R +x /usr/local/Modules/modulefiles/Brainmage/brain_mage_run
    chmod -R +x /usr/local/Modules/modulefiles/Brainmage/brain_mage_single_run

%files
    # Include your scripts
    ./DiCIPHR-Pipeline/Scripts/Fernet.sh /usr/local/bin/Scripts/Fernet.sh
    ./DiCIPHR-Pipeline/Scripts/brainmage.sh /usr/local/bin/Scripts/brainmage.sh
    ./DiCIPHR-Pipeline/Scripts/DTI_Preprocess.sh /usr/local/bin/Scripts/DTI_Preprocess.sh
    ./DiCIPHR-Pipeline/Scripts/Registration_T1-Eve.sh /usr/local/bin/Scripts/Registration_T1-Eve.sh
    ./DiCIPHR-Pipeline/Scripts/Registration_DTI-T1.sh /usr/local/bin/Scripts/Registration_DTI-T1.sh
    ./DiCIPHR-Pipeline/Scripts/Registration_DTI-Eve.sh /usr/local/bin/Scripts/Registration_DTI-Eve.sh
    ./DiCIPHR-Pipeline/Scripts/roi_stats.py /usr/local/bin/Scripts/roi_stats.py
    ./DiCIPHR-Pipeline/Scripts/pipeline_utils.sh /usr/local/bin/Scripts/pipeline_utils.sh
    ./DiCIPHR-Pipeline/Scripts/patch_numpy.py /usr/local/bin/Scripts/patch_numpy.py

    # Copy Data Files into the container
    /usr/lib64/libXp.so.6 /usr/local/lib64/libXp.so.6
    /usr/lib64/libXmu.so.6 /usr/local/lib64/libXmu.so.6
    /usr/lib64/libpng12.so.0 /usr/local/lib64/libpng12.so.0
    ./DiCIPHR-Pipeline/Input/EveTemplate /usr/local/Input/EveTemplate    
    ./DiCIPHR-Pipeline/Input/brainmage/sri24_atlas.nii.gz /usr/local/Input/sri24_atlas.nii.gz
    ./DiCIPHR-Pipeline/Input/IXI242 /usr/local/Input/IXI242

%environment
    # Set environment variables, if needed
    export PROJECT_DIR=/usr/local
    export DICIPHR=/usr/local/lib/python3.12/dist-packages/diciphr
    export FSLOUTPUTTYPE=NIFTI_GZ
    export LANG=en_US.UTF-8 
    export LC_ALL=en_US.UTF-8
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64/
    export PYTHONPATH=${PYTHONPATH}:/usr/local/bin/Scripts
    export PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python3.12/dist-packages/diciphr/
    export PATH=/usr/local/lib/python3.12/dist-packages/ANTs/centos7/2.3.1/bin:$PATH
    export SINGULARITY_BINDPATH=/gs3,/gs4,/gs5,/gs6,/gs7,/gs8,/gs9,/gs10,/gs11,/spin1,/scratch,/fdb,/data,/lscratch
    export ANTSPATH=/usr/local/lib/python3.12/dist-packages/ANTs/ants-2.5.4/bin/
    export PATH=${ANTSPATH}:${PATH}
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/python3.12/dist-packages/ANTs/ants-2.5.4/lib/
    export PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python3.12/dist-packages/ANTs/ants-2.5.4/bin/
    export PYTHONPATH=${PYTHONPATH}:/usr/local/Modules/modulefiles/Brainmage
    export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    export PYTHONPATH=${PYTHONPATH}:/usr/BrainMaGe/weights/resunet_ma.pt
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/python3.12/dist-packages/ANTs/centos7/2.3.1/lib/
    export PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python3.12/dist-packages/fsl/centos7/5.0.11/bin/
    export FSLDIR=/usr/local/lib/python3.12/dist-packages/fsl/fsl
    . ${FSLDIR}/etc/fslconf/fsl.sh
    export PATH=${FSLDIR}/bin:$PATH
    export PATH=/usr/local/lib/python3.12/dist-packages/afni/linux_ubuntu_16_64:$PATH 
    
%runscript
    #!/bin/bash
    INPUT_SUBJECT=""
    INPUT_T1_BRAINMAGE=""
    INPUT_DTI_PREPROCESS_1=""
    INPUT_OPTIONAL_DTI_TOPUP=""
    INPUT_DTI_OUTDIR=""
    INPUT_DTI_PE_DIR=""
    INPUT_ATLAS=""
    INPUT_DTI_READ_TIME=""
    INPUT_WORKDIR=""

    # Parse command-line arguments 
    while getopts "s:i:d:t:o:p:a:T:w:m:" opt; do 
        case ${opt} in 
            s ) INPUT_SUBJECT="$OPTARG" ;; 
            i ) INPUT_T1_BRAINMAGE="$OPTARG" ;; 
            d ) INPUT_DTI_PREPROCESS_1="$OPTARG" ;; 
            t ) INPUT_OPTIONAL_DTI_TOPUP="$OPTARG" ;;
            o ) INPUT_DTI_OUTDIR="$OPTARG" ;;
            p ) INPUT_DTI_PE_DIR="$OPTARG" ;;
            a ) INPUT_ATLAS="$OPTARG" ;;
            T ) INPUT_DTI_READ_TIME="$OPTARG" ;;
            w ) INPUT_WORKDIR=$PWD ;;  
            m ) INPUT_MASK="$OPTARG" ;;    
            \? ) echo "Usage: cmd [-s INPUT_SUBJECT] [-i INPUT_T1_BRAINMAGE] [-d INPUT_DTI_PREPROCESS_1] [-t INPUT_OPTIONAL_DTI_TOPUP] [-o INPUT_DTI_OUTDIR] [-p INPUT_DTI_PE_DIR] [-w INPUT_WORKDIR] [-a INPUT_ATLAS] [-T INPUT_DTI_READ_TIME] [-m INPUT_MASK]" 
            exit 1 ;; 
        esac 
    done

    # Check if mandatory arguments are provided 
    if [ -z "$INPUT_SUBJECT" ] || [ -z "$INPUT_T1_BRAINMAGE" ] || [ -z "$INPUT_DTI_PREPROCESS_1" ] || [ -z "$INPUT_DTI_OUTDIR" ]; then 
        echo "Error: Missing required arguments" 
        echo "Usage: singularity run diciphr_pipeline.sif -s <INPUT_SUBJECT> -i <INPUT_T1_BRAINMAGE> -d <INPUT_DTI_PREPROCESS_1> -o < INPUT_DTI_OUTDIR> [-t INPUT_OPTIONAL_DTI_TOPUP] [-p INPUT_DTI_PE_DIR] [-T INPUT_DTI_READ_TIME]" 
        exit 1
    fi  
  
    echo "Making Output Directories"
    mkdir -p $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/brainmage
    mkdir -p $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/
    mkdir -p $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Fernet
    mkdir -p $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess
    mkdir -p $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_T1-Eve
    mkdir -p $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-T1
    mkdir -p $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/roi_stats
    mkdir -p $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-Eve 
    echo "Appending Diciphr Package to system path"
    
    TMPDIR=/tmp/$SLURM_JOB_ID
    mkdir -p $TMPDIR
    workdir=$(mktemp -d -p $TMPDIR tmpdir.XXXXXX)
    mkdir -p /tmp/brainmage
        
    echo "Running reorient_nifti.py file"
    python3 /usr/local/lib/python3.12/dist-packages/diciphr/scripts/reorient_nifti.py -i $INPUT_T1_BRAINMAGE -o $INPUT_T1_BRAINMAGE -r LPS
    python3 /usr/local/lib/python3.12/dist-packages/diciphr/scripts/reorient_nifti.py -i $INPUT_DTI_PREPROCESS_1 -o $INPUT_DTI_PREPROCESS_1 -r LPS
    
    echo "Running Brainmage"
    
    python3 /usr/local/bin/Scripts/patch_numpy.py
  
    /usr/local/bin/Scripts/brainmage.sh -s $INPUT_SUBJECT -i $INPUT_T1_BRAINMAGE -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/brainmage
    
    STATUS_BRAINMAGE=$?    
    
    if [ -n "$INPUT_OPTIONAL_DTI_TOPUP" ] || [ -n "$INPUT_DTI_PE_DIR" ]; then
        /usr/local/bin/Scripts/DTI_Preprocess.sh -s $INPUT_SUBJECT -d $INPUT_DTI_PREPROCESS_1 -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess -t $INPUT_OPTIONAL_DTI_TOPUP -p $INPUT_DTI_PE_DIR -T $INPUT_DTI_READ_TIME -w $INPUT_WORKDIR
    else
        /usr/local/bin/Scripts/DTI_Preprocess.sh -s $INPUT_SUBJECT -d $INPUT_DTI_PREPROCESS_1 -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess -w $INPUT_WORKDIR
    fi
        
    STATUS_DTI_PREPROCESS=$?

    echo "Registration part of pipeline"
    
    # If brainmage.sh was successful, run Registration part of pipeline 
    if [ "$STATUS_BRAINMAGE" -eq 0 ]; then 
        /usr/local/bin/Scripts/Registration_T1-Eve.sh -s $INPUT_SUBJECT -t $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/brainmage/${INPUT_SUBJECT}_t1_brain.nii* -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_T1-Eve -w $INPUT_WORKDIR &
        if [ -n "$INPUT_OPTIONAL_DTI_TOPUP" ] || [ -n "$INPUT_DTI_PE_DIR" ]; then
            /usr/local/bin/Scripts/Registration_DTI-T1.sh -s $INPUT_SUBJECT -t $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/brainmage/${INPUT_SUBJECT}_t1_brain.nii* -d $INPUT_DTI_PREPROCESS_1 -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-T1 -w $INPUT_WORKDIR &
        else 
            /usr/local/bin/Scripts/Registration_DTI-T1.sh -s $INPUT_SUBJECT -t $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/brainmage/${INPUT_SUBJECT}_t1_brain.nii* -d $INPUT_DTI_PREPROCESS_1 -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-T1 -w $INPUT_WORKDIR -T s &
        fi
    else
        echo "Brainmage - Failed"
        exit 1
    fi
    wait
        
    /usr/local/bin/Scripts/Fernet.sh -s $INPUT_SUBJECT -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Fernet -d $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess/${INPUT_SUBJECT}_DWI_preprocessed.nii.gz -m $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess/${INPUT_SUBJECT}_tensor_mask.nii.gz

    /usr/local/bin/Scripts/Registration_DTI-Eve.sh -s $INPUT_SUBJECT -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration -d $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess -f $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Fernet
    STATUS_DTI_Eve=$?            
        # 8times roi_stats.py code
        # FA
    python3 /usr/local/bin/Scripts/roi_stats.py -s ${INPUT_SUBJECT} -a $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-Eve/${INPUT_SUBJECT}_Eve_Labels_to_DTI.nii* -f $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess/${INPUT_SUBJECT}_tensor_FA.nii* -c FA -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/roi_stats -l /usr/local/Input/EveTemplate/JhuMniSSLabelLookupTable_1.csv -m mean median std
        
        # TR
    python3 /usr/local/bin/Scripts/roi_stats.py -s ${INPUT_SUBJECT} -a $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-Eve/${INPUT_SUBJECT}_Eve_Labels_to_DTI.nii* -f $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess/${INPUT_SUBJECT}_tensor_TR.nii* -c TR -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/roi_stats -l /usr/local/Input/EveTemplate/JhuMniSSLabelLookupTable_1.csv -m mean median std

        # AX
    python3 /usr/local/bin/Scripts/roi_stats.py -s ${INPUT_SUBJECT} -a $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-Eve/${INPUT_SUBJECT}_Eve_Labels_to_DTI.nii* -f $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess/${INPUT_SUBJECT}_tensor_AX.nii* -c AX -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/roi_stats -l /usr/local/Input/EveTemplate/JhuMniSSLabelLookupTable_1.csv -m mean median std
        
        # RAD
    python3 /usr/local/bin/Scripts/roi_stats.py -s ${INPUT_SUBJECT} -a $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-Eve/${INPUT_SUBJECT}_Eve_Labels_to_DTI.nii* -f $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/DTI_Preprocess/${INPUT_SUBJECT}_tensor_RAD.nii* -c RAD -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/roi_stats -l /usr/local/Input/EveTemplate/JhuMniSSLabelLookupTable_1.csv -m mean median std
        
        # FERNET
        # fwFA
    python3 /usr/local/bin/Scripts/roi_stats.py -s ${INPUT_SUBJECT} -a $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-Eve/${INPUT_SUBJECT}_Eve_Labels_to_DTI.nii* -f $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Fernet/${INPUT_SUBJECT}_fw_tensor_FA.nii* -c fwFA -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/roi_stats -l /usr/local/Input/EveTemplate/JhuMniSSLabelLookupTable_1.csv -m mean median std

        # fwVF
    python3 /usr/local/bin/Scripts/roi_stats.py -s ${INPUT_SUBJECT} -a $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-Eve/${INPUT_SUBJECT}_Eve_Labels_to_DTI.nii* -f $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Fernet/${INPUT_SUBJECT}_fw_volume_fraction.nii* -c fwVF -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/roi_stats -l /usr/local/Input/EveTemplate/JhuMniSSLabelLookupTable_1.csv -m mean median std

	#f
    python3 /usr/local/bin/Scripts/roi_stats.py -s ${INPUT_SUBJECT} -a $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-Eve/${INPUT_SUBJECT}_Eve_Labels_to_DTI.nii* -f $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Fernet/${INPUT_SUBJECT}_fw_tensor_AX.nii* -c fwAX -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/roi_stats -l /usr/local/Input/EveTemplate/JhuMniSSLabelLookupTable_1.csv -m mean median std

        # fwRAD
    python3 /usr/local/bin/Scripts/roi_stats.py -s ${INPUT_SUBJECT} -a $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Registration/Registration_DTI-Eve/${INPUT_SUBJECT}_Eve_Labels_to_DTI.nii* -f $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/Fernet/${INPUT_SUBJECT}_fw_tensor_RAD.nii* -c fwRAD -o $INPUT_DTI_OUTDIR/${INPUT_SUBJECT}/roi_stats -l /usr/local/Input/EveTemplate/JhuMniSSLabelLookupTable_1.csv -m mean median std

    if [ "$STATUS_BRAINMAGE" -eq 0 ] && [ "$STATUS_DTI_PREPROCESS" -eq 0] && [ "$STATUS_DTI_Eve" -eq 0]; then
        echo "Pipeline Execution Completed"


%test
    #!/bin/bash
    export TMPDIR=/tmp/test
    mkdir -p $TMPDIR

    # Run the first command
    /usr/local/bin/Scripts/brainmage.sh -s IXI242 -i /usr/local/Input/IXI242/IXI242-HH-1722-T1.nii.gz -o $TMPDIR
    status1=$?
 
    # Run the second command
    /usr/local/lib/python3.12/dist-packages/diciphr/scripts/dti_estimate.py -d /usr/local/Input/IXI242/IXI242-HH-1722-DTI.nii.gz -o $TMPDIR
    status2=$?

    file_count=$(find /tmp -type f | wc -l)
    
    # Check if both commands were successful
    if [ $status1 -eq 0 ] && [ $status2 -eq 0 ] && [ $file_count -eq 14 ]; then
        echo "Container Test Successful, Please Run the Container"
        echo "Maintainer: Drew Parker <william.parker@pennmedicine.upenn.edu> and Sai Krishna Chaitanya Annavazala <SaiKrishna.Annavazala@pennmedicine.upenn.edu>"
        echo "Version: 1.0.0"
    else
        echo "One or both commands failed. Please check the error messages."
    fi
